find.package("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
dir()
getwd()
setwd(Git_repos)
setwd("Git_repos")
setwd("ProgrammingAssignment2")
?list
?solve
##
## functions do
## creates a "matrix" that can get and set in cache the
## values of itself and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv_m <- NULL
set <- function(y) {
x <<- y
inv_m <<- NULL
}
get <- function() x
setinv <- function(inverse) inv_m <<- inverse
getinv <- function() inv_m
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Checks if the value of the inverse matrix is stored in cache,
## if it is returns that value, if not calculates it using solve and then stores it
cacheSolve <- function(x, ...) {
inv_m <- x$getinv()
if(!is.null(inv_m)) {
message("getting cached data")
return(inv_m)
}
data <- x$get()
inv_m <- solve(data, ...)
x$setinv(inv_m)
inv_m
}
mtrx <- matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)
mtrx
solve(mtrx)
c_mtrx <- makeCacheMatrix(mtrx)
c_mtrx$get()
c_mtrx$getinv()
cacheSolve(c_mtrx)
cacheSolve(c_mtrx)
mtrx <- matrix(1:16, 4, 4)
mtrx
cm<-makeCacheMatrix(mtrx)
cacheSolve(cm)
